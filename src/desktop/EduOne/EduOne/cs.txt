   JsonSerializerOptions options =new JsonSerializerOptions()
                        {
                            ReferenceHandler = ReferenceHandler.IgnoreCycles,
                            WriteIndented = true
                        };
                        var jsonData = System.Text.Json.JsonSerializer.Serialize(data,options);

                        var content = new StringContent(jsonData, Encoding.UTF8, "application/json");
                        var response = await client.PostAsync(apiUrl, content).ConfigureAwait(false);

                        if (response.IsSuccessStatusCode)
                        {
                            var responseData = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            "".DisplayDialog("Le département a été créé");
                            btnadd.Enabled = false;
                        }
                        else
                        {
                            Invoke(new Action(() =>
                               XtraMessageBox.Show($"Failed to call the web service. Status code: {response.StatusCode}");
                              ));

                        }



                            Invoke(new Action(() =>
                        {
                            XtraMessageBox.Show($"An error occurred: {ex.Message}");
                        }));

=============================================
 string apiUrl = WebServerHelpers.GetApiApplicationUrl(IsAppInProd()) + "/ApplicationUsers";
                using (var client = new HttpClient())
                {
                    try
                    {
                        var jsonData = System.Text.Json.JsonSerializer.Serialize(data);

                        var content = new StringContent(jsonData, Encoding.UTF8, "application/json");
                        var response = await client.PostAsync(apiUrl,content).ConfigureAwait(false);

                        if (response.IsSuccessStatusCode)
                        {
                            var responseData = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                            "".DisplayDialog("L'utilisateur a été créé");
                            btnadd.Enabled = false;
                        }
                        else
                        {
                            XtraMessageBox.Show($"Failed to call the web service. Status code: {response.StatusCode}");
                        }
                    }
                    catch (Exception ex)
                    {
                        XtraMessageBox.Show($"An error occurred: {ex.Message}");
                    }
                }
===================Not yet computed=================================

var needed_courses = await Task.WhenAll(
    courses.Select(async x => new
    {
        x.Cours_Id,
        x.Nom_Cours,
        x.Description,
        Département = await GetDepartmentNameAsync(x.ID_Department).ConfigureAwait(false),
        x.Statut,
        x.AjouterAu,
        x.AjouterPar,
        x.ModifierAu,
        x.ModifierPar
    })
);

var neededCoursesList = needed_courses.ToList();
========================================================================================================
This code below is throwing this error :"System.InvalidOperationException: 'Cross-thread operation not valid: Control 'drpcourseid' accessed from a thread other than the thread it was created on.'"

  Invoke(new Action(async() =>

  {

      drpcourseid.Text = await GetCourseName(edit.CoursId).ConfigureAwait(false);

      drpstudentid.Text = await GetStudentAsync(edit.EleveId).ConfigureAwait(false);

  }));

  solution:

  var courseName = await GetCourseName(edit.CoursId).ConfigureAwait(false);
var studentName = await GetStudentAsync(edit.EleveId).ConfigureAwait(false);

Invoke(new Action(() =>
{
    drpcourseid.Text = courseName;
    drpstudentid.Text = studentName;
}));

